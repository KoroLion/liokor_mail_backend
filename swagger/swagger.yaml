swagger: "2.0"
info:
  description: "Docs for LioKor Mail API"
  version: "1.0.0"
  title: "LioKor Mail"
  contact:
    email: "korolion31@yandex.ru"
basePath: "/"
tags:
- name: "user"
  description: "User operations"
paths:
  /user/auth:
    post:
      tags:
      - "user"
      summary: "Authenticates user and sets session cookie"
      description: ""
      operationId: "authUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "authData"
        description: "User auth data"
        required: true
        schema:
          $ref: "#/definitions/authData"
      responses:
        "200":
          description: "Successful authentication"
        "400":
          description: "Invalid data in request"
        "403":
          description: "Invalid login or password"
  /user/session:
    delete:
      tags:
      - "user"
      summary: "Removes user's session from db"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
        "401":
          description: "Not authenticated"
  /user:
    get:
      tags:
      - "user"
      summary: "Returns authenticated user data"
      responses:
        "200":
          description: "successful operation"
        "401":
          description: "Not authenticated"
    post:
      tags:
      - "user"
      summary: "Creates new user"
      description: ""
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid user data provided"
        "409":
          description: "Username already taken"
  /user/{username}:
    # get:
      # tags:
      # - "user"
      # summary: "Get user by username"
      # operationId: "getUserByName"
      # produces:
      # - "application/json"
      # parameters:
      # - name: "username"
        # in: "path"
        # required: true
        # type: "string"
      # responses:
        # "200":
          # description: "successful operation"
          # schema:
            # $ref: "#/definitions/User"
        # "404":
          # description: "User not found"
    put:
      tags:
      - "user"
      summary: "Update user by username"
      description: "Must be authenticated as {username}"
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "username that needs to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
            description: "User updated successfully"
        "400":
          description: "Invalid user data provided"
        "401":
          description: "Access denied"
        "404":
          description: "User not found"
  /user/{username}/password:
    put:
      tags:
      - "user"
      summary: "Changes password of user specified by username"
      description: "Must be authenticated as {username}"
      operationId: "updateUserPassword"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/passwordChange"
      responses:
        "200":
          description: "Password changed successfully"
        "400":
          description: "Invalid password data provided"
        "401":
          description: "Access denied"
        "404":
          description: "User not found"
  /email/dialogues:
      get:
        tags:
        - "email"
        summary: "Returns dialogues of an authenticated user"
        description: "Must be authenticated"
        operationId: "getDialogues"
        produces:
        - "application/json"
        parameters:
        - name: "amount"
          in: "query"
          description: "amount of dialogues to receive"
          required: false
          type: "integer"
        - name: "last"
          in: "query"
          description: "end list with that id, not including it"
          required: false
          type: "integer"
        - name: "find"
          in: "query"
          description: "filter for email addresses to return"
          required: false
        responses:
          "200":
            description: "Returns list of dialogues"
          "401":
            description: "Not authenticated"
  /email/emails:
      get:
        tags:
        - "email"
        summary: "Returns emails of the selected dialogue"
        description: "Must be authenticated"
        operationId: "getEmails"
        produces:
        - "application/json"
        parameters:
        - name: "with"
          in: "query"
          description: "2nd user"
          required: true
          type: "string"
        - name: "amount"
          in: "query"
          description: "amount of emails to receive"
          required: false
          type: "integer"
        - name: "last"
          in: "query"
          description: "end list with that id, not including it"
          required: false
          type: "integer"
        responses:
          "200":
            description: "Returns list of emails"
          "401":
            description: "Not authenticated"
  /email:
    post:
      tags:
      - "email"
      summary: "Sends email"
      description: "Must be authenticated"
      operationId: "sendEmail"
      parameters:
      - in: "body"
        name: "body"
        description: "email to send"
        required: true
        schema:
          $ref: "#/definitions/email"
      responses:
        "200":
          description: "Email was sent"
        "401":
          description: "Not authenticated"

definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 1
      username:
        type: "string"
        example: "Wolf"
      fullname:
        type: "string"
        example: "Leo Volkov"
      avatarUrl:
        type: "string"
        example: "/media/avatars/wolf.jpg"
      reserveEmail:
        type: "string"
        example: "wolf@liokor.ru"
      joinedDate:
        type: "string"
        example: ""
      password:
        type: "string"
        example: "qwerty123"
      isAdmin:
        type: "boolean"
        example: false
  authData:
    type: "object"
    required:
    - "username"
    - "password"
    properties:
      username:
        type: "string"
      password:
        type: "string"
  passwordChange:
    type: "object"
    required:
    - "oldPassword"
    - "newPassword"
    properties:
      oldPassword:
        type: "string"
      newPassword:
        type: "string"
  email:
    type: "object"
    required:
    - "recipient"
    - "subject"
    - "body"
    properties:
      recipient:
        type: "string"
      subject:
        type: "string"
      body:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"

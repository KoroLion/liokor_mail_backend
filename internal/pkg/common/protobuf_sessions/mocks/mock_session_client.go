// Code generated by MockGen. DO NOT EDIT.
// Source: liokor_mail/internal/pkg/common/protobuf_sessions (interfaces: IsAuthClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	protobuf_sessions "liokor_mail/internal/pkg/common/protobuf_sessions"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockIsAuthClient is a mock of IsAuthClient interface.
type MockIsAuthClient struct {
	ctrl     *gomock.Controller
	recorder *MockIsAuthClientMockRecorder
}

// MockIsAuthClientMockRecorder is the mock recorder for MockIsAuthClient.
type MockIsAuthClientMockRecorder struct {
	mock *MockIsAuthClient
}

// NewMockIsAuthClient creates a new mock instance.
func NewMockIsAuthClient(ctrl *gomock.Controller) *MockIsAuthClient {
	mock := &MockIsAuthClient{ctrl: ctrl}
	mock.recorder = &MockIsAuthClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIsAuthClient) EXPECT() *MockIsAuthClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIsAuthClient) Create(arg0 context.Context, arg1 *protobuf_sessions.Session, arg2 ...grpc.CallOption) (*protobuf_sessions.Session, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*protobuf_sessions.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIsAuthClientMockRecorder) Create(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIsAuthClient)(nil).Create), varargs...)
}

// Delete mocks base method.
func (m *MockIsAuthClient) Delete(arg0 context.Context, arg1 *protobuf_sessions.SessionToken, arg2 ...grpc.CallOption) (*protobuf_sessions.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*protobuf_sessions.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockIsAuthClientMockRecorder) Delete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIsAuthClient)(nil).Delete), varargs...)
}

// Get mocks base method.
func (m *MockIsAuthClient) Get(arg0 context.Context, arg1 *protobuf_sessions.SessionToken, arg2 ...grpc.CallOption) (*protobuf_sessions.Session, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*protobuf_sessions.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIsAuthClientMockRecorder) Get(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIsAuthClient)(nil).Get), varargs...)
}
